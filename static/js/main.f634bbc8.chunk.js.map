{"version":3,"sources":["components/date-input/date-input.js","components/date-input/index.js","components/tel-input/tel-input.js","components/tel-input/index.js","components/form/form.js","components/form/index.js","index.js"],"names":["defaultDate","date","Date","now","d","getDate","slice","getMonth","getFullYear","getHours","getMinutes","formatDate","getTime","dateFieldToTimestamp","value","res","match","mo","y","h","mi","timestamp","parse","isNaN","CustomMaskedInput","forwardRef","props","ref","onChange","name","mask","maskPlaceholder","alwaysShowMask","e","persist","target","inputProps","type","className","DateInput","control","errors","React","useState","tel","setTel","as","rules","validate","inputTelRequired","v","undefined","today","validateDate","defaultValue","TelInput","required","ErrorMessage","error","message","Fragment","SuccessMessage","success","Form","useForm","reValidateMode","handleSubmit","register","setError","clearErrors","isSubmitting","setSubmitting","setSuccess","onSubmit","values","a","data","id","phone","trim","replace","comment","fetch","method","headers","body","JSON","stringify","then","response","json","handleResults","catch","setTimeout","Promise","resolve","disabled","htmlFor","maxLength","rows","agree","submit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f634bbc8.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\r\nimport MaskedInput from \"react-input-mask\";\r\nimport { Controller } from \"react-hook-form\";\r\n\r\nfunction formatDate(d) {\r\n    const date = new Date(d);\r\n    return (\"0\" + (date.getDate())).slice(-2) + \".\" +\r\n        (\"0\" + (date.getMonth() + 1)).slice(-2) + \".\" +\r\n        date.getFullYear() + \" \" +\r\n        (\"0\" + (date.getHours())).slice(-2) + \":\" +\r\n        (\"0\" + (date.getMinutes())).slice(-2);\r\n}\r\n\r\nfunction defaultDate() {\r\n    const date = new Date(Date.now());\r\n    const tomorrow = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1, 0, 0);\r\n    return formatDate(tomorrow.getTime());\r\n}\r\n\r\nfunction validateDate(value) {\r\n    let timestamp = dateFieldToTimestamp(value);\r\n    if (timestamp === undefined) {\r\n        return 'Неверная дата';\r\n    }\r\n    const today = new Date(Date.now());\r\n    const date = new Date(timestamp);\r\n    if (date.getTime() < today.getTime()) {\r\n        return 'Неверная дата';\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function dateFieldToTimestamp(value) {\r\n    const res = value.match(/^(\\d{2}).(\\d{2}).(\\d{4}) (\\d{2}):(\\d{2})$/);\r\n    if (res === null) {\r\n        return undefined;\r\n    }\r\n    const [, d, mo, y, h, mi] = res;\r\n    const timestamp = Date.parse(`${y}-${mo}-${d}T${h}:${mi}`);\r\n    if (isNaN(timestamp)) {\r\n        return undefined;\r\n    }\r\n    return timestamp;\r\n}\r\n\r\nconst CustomMaskedInput = forwardRef((props, ref) => {\r\n    const { value, onChange, name } = props;\r\n    return (\r\n        <MaskedInput\r\n            name={name}\r\n            value={value}\r\n            mask=\"99.99.9999 99:99\"\r\n            maskPlaceholder={\"_\"}\r\n            alwaysShowMask\r\n            onChange={e => {\r\n                e.persist();\r\n                onChange(e.target.value);\r\n            }}\r\n        >\r\n            {({ maskPlaceholder, ...inputProps }) => (\r\n                <input type=\"text\" name={inputProps.name} className=\"form-control\" {...inputProps} />\r\n            )}\r\n        </MaskedInput>\r\n    );\r\n});\r\n\r\nexport default function DateInput({ name, errors, control }) {\r\n\r\n    const [tel, setTel] = React.useState(defaultDate());\r\n\r\n    return (\r\n        <Controller\r\n            as={<CustomMaskedInput />}\r\n            value={tel}\r\n            onChange={([e]) => {\r\n                setTel(e);\r\n                return { value: e };\r\n            }}\r\n            rules={{\r\n                validate: {\r\n                    inputTelRequired: v => validateDate(v)\r\n                }\r\n            }}\r\n            defaultValue={tel}\r\n            name={name}\r\n            control={control}\r\n        />\r\n    );\r\n}\r\n","import DateInput, { dateFieldToTimestamp } from './date-input';\r\nexport default DateInput;\r\nexport { dateFieldToTimestamp };","import React, { forwardRef } from \"react\";\r\nimport MaskedInput from \"react-input-mask\";\r\nimport { Controller } from \"react-hook-form\";\r\n\r\nconst CustomMaskedInput = forwardRef((props, ref) => {\r\n    const { value, onChange, name } = props;\r\n    return (\r\n        <MaskedInput\r\n            name={name}\r\n            value={value}\r\n            mask=\"+7 (999) 999-9999\"\r\n            maskPlaceholder={\"_\"}\r\n            alwaysShowMask\r\n            onChange={e => {\r\n                e.persist();\r\n                onChange(e.target.value);\r\n            }}\r\n        >\r\n            {({ maskPlaceholder, ...inputProps }) => (\r\n                <input type=\"text\" name={inputProps.name} className=\"form-control\" {...inputProps} />\r\n            )}\r\n        </MaskedInput>\r\n    );\r\n});\r\n\r\nexport default function TelInput({ name, errors, control }) {\r\n\r\n    const [tel, setTel] = React.useState(\"\");\r\n\r\n    return (\r\n        <Controller\r\n            as={<CustomMaskedInput />}\r\n            value={tel}\r\n            onChange={([e]) => {\r\n                setTel(e);\r\n                return { value: e };\r\n            }}\r\n            rules={{\r\n                required: \"Необходимо указать телефон\"\r\n            }}\r\n            defaultValue={tel}\r\n            name={name}\r\n            control={control}\r\n        />\r\n    );\r\n}\r\n","import TelInput from './tel-input';\r\nexport default TelInput;","import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport DateInput, { dateFieldToTimestamp } from '../date-input/';\r\nimport TelInput from '../tel-input/';\r\n\r\nimport './form.scss';\r\n\r\nconst Form = (props) => {\r\n    const { handleSubmit, register, setError, clearErrors, errors, control } = useForm({ reValidateMode: 'onChange' });\r\n    const [isSubmitting, setSubmitting] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const onSubmit = async (values) => {\r\n        if (!isSubmitting) {\r\n            setSubmitting(true);\r\n            const data = {\r\n                id: 1,\r\n                data: {\r\n                    phone: values.phone.trim().replace(/\\D/g, '').replace(/^7/g, '+7'),\r\n                    date: dateFieldToTimestamp(values.date),\r\n                    comment: values.comment\r\n                }\r\n            }\r\n\r\n            fetch('https://cors-anywhere.herokuapp.com/https://interview.gazilla-lounge.ru/api/submit', {\r\n                method: 'post',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(data)\r\n            }).then(response => response.json()\r\n            ).then(data => handleResults(data)\r\n            ).catch(() => {\r\n                setError(\"submit\", { type: \"double_send\", message: \"Ошибка при обработке формы\" })\r\n                setTimeout(() => { clearErrors(\"submit\") }, 3000);\r\n            });\r\n\r\n            await new Promise(resolve => {\r\n                setTimeout(() => {\r\n                    setSubmitting(false);\r\n                    resolve();\r\n                }, 5000);\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleResults({ data: success }) {\r\n        if (success) {\r\n            setSuccess(true);\r\n        } else {\r\n            setError(\"submit\", { type: \"double_send\", message: \"Ошибка при обработке формы\" })\r\n            setTimeout(() => { clearErrors(\"submit\") }, 3000);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"call-form__wrapper mx-auto container\">\r\n            <form onSubmit={handleSubmit(onSubmit)} className=\"call-form\" disabled={isSubmitting}>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"phone\">Номер телефона</label>\r\n                    <TelInput name=\"phone\" errors={errors} control={control} />\r\n                </div>\r\n\r\n                {errors.phone ? <ErrorMessage message={errors.phone.message} /> : ''}\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"date\">Дата и время обратного звонка</label>\r\n                    <DateInput name=\"date\" errors={errors} control={control} />\r\n                </div>\r\n\r\n                <ErrorMessage error={errors.date} />\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"comment\">Комментарий к заявке</label>\r\n                    <textarea\r\n                        name=\"comment\"\r\n                        id=\"comment\"\r\n                        maxLength=\"1024\"\r\n                        rows=\"6\"\r\n                        ref={register({\r\n                            maxLength: {\r\n                                value: 1024,\r\n                                message: \"Слишком длинный текст\"\r\n                            }\r\n                        })}\r\n                        className=\"form-control\"></textarea>\r\n                </div>\r\n\r\n                <ErrorMessage error={errors.comment} />\r\n\r\n                <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <div className=\"input-group-text\">\r\n                            <input\r\n                                id=\"agree\"\r\n                                name=\"agree\"\r\n                                type=\"checkbox\"\r\n                                className=\"checkbox\"\r\n                                ref={register({\r\n                                    required: \"Необходимо согласиться с предоставлением услуги\"\r\n                                })} />\r\n                        </div>\r\n                    </div>\r\n                    <label htmlFor=\"agree\" className=\"form-control\">Согласен с предоставлением услуги</label>\r\n                </div>\r\n\r\n                <ErrorMessage error={errors.agree} />\r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" className=\"btn btn-primary\" value=\"Отправить заявку\" disabled={isSubmitting} />\r\n                </div>\r\n\r\n                <ErrorMessage error={errors.submit} />\r\n\r\n                <SuccessMessage success={success} />\r\n\r\n            </form >\r\n        </div >\r\n    );\r\n};\r\n\r\nconst ErrorMessage = ({ error }) => (error ?\r\n    <div className=\"form-group call-form__error\">\r\n        {error.message}\r\n    </div> :\r\n    <React.Fragment>\r\n    </React.Fragment>\r\n);\r\n\r\nconst SuccessMessage = ({ success }) => (success ?\r\n    <div className=\"form-group call-form__success\">\r\n        {'Заявка успешно создана'}\r\n    </div> :\r\n    <React.Fragment>\r\n    </React.Fragment>\r\n);\r\n\r\nexport default Form;\r\n","import Form from './form';\r\n\r\nexport default Form;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Form from './components/form';\n\n\n\nReactDOM.render(<Form />, document.getElementById('root'));\n"],"sourceRoot":""}