{"version":3,"sources":["components/date-input/date-input.js","components/date-input/index.js","components/tel-input/tel-input.js","components/tel-input/index.js","components/form/form.js","components/form/index.js","index.js"],"names":["defaultDate","date","Date","now","getFullYear","getMonth","getDate","dateFieldToTimestamp","value","res","match","d","mo","y","h","mi","timestamp","parse","isNaN","CustomMaskedInput","forwardRef","props","ref","onChange","name","mask","maskPlaceholder","alwaysShowMask","e","persist","target","inputProps","type","className","DateInput","control","errors","React","useState","slice","getHours","getMinutes","tel","setTel","as","rules","validate","inputTelRequired","v","undefined","min_date","getTime","validateDate","defaultValue","TelInput","required","ErrorMessage","error","message","Fragment","SuccessMessage","success","Form","useForm","reValidateMode","handleSubmit","register","setError","clearErrors","isSubmitting","setSubmitting","setSuccess","onSubmit","values","a","data","id","phone","trim","replace","comment","fetch","method","headers","body","JSON","stringify","then","response","json","handleResults","catch","setTimeout","Promise","resolve","disabled","htmlFor","maxLength","rows","agree","submit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9a572f9.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\r\nimport MaskedInput from \"react-input-mask\";\r\nimport { Controller } from \"react-hook-form\";\r\n\r\nfunction formatDate(d) {\r\n    return (\"0\" + (d.getDate())).slice(-2) + \".\" +\r\n        (\"0\" + (d.getMonth() + 1)).slice(-2) + \".\" +\r\n        d.getFullYear() + \" \" +\r\n        (\"0\" + (d.getHours())).slice(-2) + \":\" +\r\n        (\"0\" + (d.getMinutes())).slice(-2);\r\n}\r\n\r\nfunction defaultDate() {\r\n    const date = new Date(Date.now());\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1, 9, 0);\r\n}\r\n\r\nfunction validateDate(value) {\r\n    let timestamp = dateFieldToTimestamp(value);\r\n    if (timestamp === undefined) {\r\n        return 'Неверная дата';\r\n    }\r\n    const min_date = defaultDate();\r\n    const date = new Date(timestamp);\r\n    if (date.getTime() < min_date.getTime()) {\r\n        return 'Укажите дату не ранее завтрашнего дня';\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function dateFieldToTimestamp(value) {\r\n    const res = value.match(/^(\\d{2}).(\\d{2}).(\\d{4}) (\\d{2}):(\\d{2})$/);\r\n    if (res === null) {\r\n        return undefined;\r\n    }\r\n    const [, d, mo, y, h, mi] = res;\r\n    const timestamp = Date.parse(`${y}-${mo}-${d}T${h}:${mi}`);\r\n    if (isNaN(timestamp)) {\r\n        return undefined;\r\n    }\r\n    return timestamp;\r\n}\r\n\r\nconst CustomMaskedInput = forwardRef((props, ref) => {\r\n    const { value, onChange, name } = props;\r\n    return (\r\n        <MaskedInput\r\n            name={name}\r\n            value={value}\r\n            mask=\"99.99.9999 99:99\"\r\n            maskPlaceholder={\"_\"}\r\n            alwaysShowMask\r\n            onChange={e => {\r\n                e.persist();\r\n                onChange(e.target.value);\r\n            }}\r\n        >\r\n            {({ maskPlaceholder, ...inputProps }) => (\r\n                <input type=\"text\" name={inputProps.name} className=\"form-control\" {...inputProps} />\r\n            )}\r\n        </MaskedInput>\r\n    );\r\n});\r\n\r\nexport default function DateInput({ name, errors, control }) {\r\n\r\n    const [tel, setTel] = React.useState(formatDate(defaultDate()));\r\n\r\n    return (\r\n        <Controller\r\n            as={<CustomMaskedInput />}\r\n            value={tel}\r\n            onChange={([e]) => {\r\n                setTel(e);\r\n                return { value: e };\r\n            }}\r\n            rules={{\r\n                validate: {\r\n                    inputTelRequired: v => validateDate(v)\r\n                }\r\n            }}\r\n            defaultValue={tel}\r\n            name={name}\r\n            control={control}\r\n        />\r\n    );\r\n}\r\n","import DateInput, { dateFieldToTimestamp } from './date-input';\r\nexport default DateInput;\r\nexport { dateFieldToTimestamp };","import React, { forwardRef } from \"react\";\r\nimport MaskedInput from \"react-input-mask\";\r\nimport { Controller } from \"react-hook-form\";\r\n\r\nconst CustomMaskedInput = forwardRef((props, ref) => {\r\n    const { value, onChange, name } = props;\r\n    return (\r\n        <MaskedInput\r\n            name={name}\r\n            value={value}\r\n            mask=\"+7 (999) 999-9999\"\r\n            maskPlaceholder={\"_\"}\r\n            alwaysShowMask\r\n            onChange={e => {\r\n                e.persist();\r\n                onChange(e.target.value);\r\n            }}\r\n        >\r\n            {({ maskPlaceholder, ...inputProps }) => (\r\n                <input type=\"text\" name={inputProps.name} className=\"form-control\" {...inputProps} />\r\n            )}\r\n        </MaskedInput>\r\n    );\r\n});\r\n\r\nexport default function TelInput({ name, errors, control }) {\r\n\r\n    const [tel, setTel] = React.useState(\"\");\r\n\r\n    return (\r\n        <Controller\r\n            as={<CustomMaskedInput />}\r\n            value={tel}\r\n            onChange={([e]) => {\r\n                setTel(e);\r\n                return { value: e };\r\n            }}\r\n            rules={{\r\n                required: \"Необходимо указать телефон\"\r\n            }}\r\n            defaultValue={tel}\r\n            name={name}\r\n            control={control}\r\n        />\r\n    );\r\n}\r\n","import TelInput from './tel-input';\r\nexport default TelInput;","import React, { Fragment, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport DateInput, { dateFieldToTimestamp } from '../date-input/';\r\nimport TelInput from '../tel-input/';\r\n\r\nimport './form.scss';\r\n\r\nconst Form = (props) => {\r\n    const { handleSubmit, register, setError, clearErrors, errors, control } = useForm({ reValidateMode: 'onChange' });\r\n    const [isSubmitting, setSubmitting] = useState(false);\r\n    const [success, setSuccess] = useState(false);\r\n\r\n    const onSubmit = async (values) => {\r\n        if (!isSubmitting) {\r\n            setSubmitting(true);\r\n            const data = {\r\n                id: 1,\r\n                data: {\r\n                    phone: values.phone.trim().replace(/\\D/g, '').replace(/^7/g, '+7'),\r\n                    date: dateFieldToTimestamp(values.date),\r\n                    comment: values.comment\r\n                }\r\n            }\r\n\r\n            fetch('https://cors-anywhere.herokuapp.com/https://interview.gazilla-lounge.ru/api/submit', {\r\n                method: 'post',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(data)\r\n            }).then(response => response.json()\r\n            ).then(data => handleResults(data)\r\n            ).catch(() => {\r\n                setError(\"submit\", { type: \"double_send\", message: \"Ошибка при обработке формы\" })\r\n                setTimeout(() => { clearErrors(\"submit\") }, 3000);\r\n            });\r\n\r\n            await new Promise(resolve => {\r\n                setTimeout(() => {\r\n                    setSubmitting(false);\r\n                    resolve();\r\n                }, 5000);\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleResults({ data: success }) {\r\n        if (success) {\r\n            setSuccess(true);\r\n        } else {\r\n            setError(\"submit\", { type: \"double_send\", message: \"Ошибка при обработке формы\" })\r\n            setTimeout(() => { clearErrors(\"submit\") }, 3000);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"call-form__wrapper mx-auto container\">\r\n                <h1>Заявка на обратный звонок</h1>\r\n                <form onSubmit={handleSubmit(onSubmit)} className=\"call-form\" disabled={isSubmitting}>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <TelInput name=\"phone\" errors={errors} control={control} />\r\n                    </div>\r\n\r\n                    <ErrorMessage error={errors.phone} />\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"date\">Дата и время обратного звонка</label>\r\n                        <DateInput name=\"date\" errors={errors} control={control} />\r\n                    </div>\r\n\r\n                    <ErrorMessage error={errors.date} />\r\n\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"comment\">Комментарий к заявке</label>\r\n                        <textarea\r\n                            name=\"comment\"\r\n                            id=\"comment\"\r\n                            maxLength=\"1024\"\r\n                            rows=\"6\"\r\n                            ref={register({\r\n                                maxLength: {\r\n                                    value: 1024,\r\n                                    message: \"Слишком длинный текст\"\r\n                                }\r\n                            })}\r\n                            className=\"form-control\"></textarea>\r\n                    </div>\r\n\r\n                    <ErrorMessage error={errors.comment} />\r\n\r\n                    <div className=\"input-group mb-3\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text\">\r\n                                <input\r\n                                    id=\"agree\"\r\n                                    name=\"agree\"\r\n                                    type=\"checkbox\"\r\n                                    className=\"checkbox\"\r\n                                    ref={register({\r\n                                        required: \"Необходимо согласиться с предоставлением услуги\"\r\n                                    })} />\r\n                            </div>\r\n                        </div>\r\n                        <label htmlFor=\"agree\" className=\"form-control\">Согласен с предоставлением услуги</label>\r\n                    </div>\r\n\r\n                    <ErrorMessage error={errors.agree} />\r\n\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" className=\"btn btn-primary\" value=\"Отправить заявку\" disabled={isSubmitting} />\r\n                    </div>\r\n\r\n                    <ErrorMessage error={errors.submit} />\r\n\r\n                    <SuccessMessage success={success} />\r\n\r\n                </form >\r\n            </div >\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nconst ErrorMessage = ({ error }) => (error ?\r\n    <div className=\"form-group call-form__error\">\r\n        {error.message}\r\n    </div> :\r\n    <React.Fragment>\r\n    </React.Fragment>\r\n);\r\n\r\nconst SuccessMessage = ({ success }) => (success ?\r\n    <div className=\"form-group call-form__success\">\r\n        {'Заявка успешно создана'}\r\n    </div> :\r\n    <Fragment>\r\n    </Fragment>\r\n);\r\n\r\nexport default Form;\r\n","import Form from './form';\r\n\r\nexport default Form;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Form from './components/form';\n\nimport 'bootswatch/dist/slate/bootstrap.min.css';\nimport './index.scss';\n\n\nReactDOM.render(<Form />, document.getElementById('root'));\n"],"sourceRoot":""}